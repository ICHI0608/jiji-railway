#!/usr/bin/env node

/**
 * JijiÊÑüÊÉÖÁöÑ„Éû„ÉÉ„ÉÅ„É≥„Ç∞„Ç∑„Çπ„ÉÜ„É† - „É™„Ç¢„É´„Éá„Éº„Çø„ÉÜ„Çπ„Éà
 * 79Â∫óËàó„ÅÆÂÆü„Éá„Éº„Çø„Çí‰ΩøÁî®„Åó„Åü„Éû„ÉÉ„ÉÅ„É≥„Ç∞„ÉÜ„Çπ„Éà
 */

const MockJijiSheetsConnector = require('./src/sheets-connector-mock');
const { JIJI_PERSONA, generateSystemPrompt } = require('./src/jiji-persona');

class JijiEmotionalMatcherWithRealData {
    constructor() {
        this.sheetsConnector = new MockJijiSheetsConnector();
        this.jijiPersona = JIJI_PERSONA;
        
        // 6„Å§„ÅÆÊÑüÊÉÖ„Ç´„ÉÜ„Ç¥„É™„Å®Èáç„Åø
        this.emotionalConcerns = {
            safety: { 
                weight: 25, 
                keywords: ['ÂÆâÂÖ®', '‰∏çÂÆâ', 'ÊÄñ„ÅÑ', 'Âàù„ÇÅ„Å¶', 'ÂøÉÈÖç', '‰∫ãÊïÖ', '„É™„Çπ„ÇØ', '‰øùÈô∫']
            },
            skill: { 
                weight: 20, 
                keywords: ['‰∏ãÊâã', '„Åß„Åç„Å™„ÅÑ', 'ÂàùÂøÉËÄÖ', 'Êú™ÁµåÈ®ì', '„Çπ„Ç≠„É´', 'ÊäÄË°ì', 'Ë¨õÁøí']
            },
            solo: { 
                weight: 18, 
                keywords: ['‰∏Ä‰∫∫', '„Åº„Å£„Å°', 'Áã¨„Çä', '„ÇΩ„É≠', 'Â•≥ÊÄß‰∏Ä‰∫∫', 'Áî∑ÊÄß‰∏Ä‰∫∫']
            },
            cost: { 
                weight: 15, 
                keywords: ['È´ò„ÅÑ', 'ÊñôÈáë', 'ÂÆâ„ÅÑ', '‰∫àÁÆó', '„Ç≥„Çπ„Éà', 'Ë≤ªÁî®', 'ÁØÄÁ¥Ñ']
            },
            physical: { 
                weight: 12, 
                keywords: ['‰ΩìÂäõ', 'Áñ≤„Çå„Çã', 'Ê≥≥„Åí„Å™„ÅÑ', 'Á≠ãÂäõ', 'ÊåÅ‰πÖÂäõ', 'Âπ¥ÈΩ¢']
            },
            communication: { 
                weight: 10, 
                keywords: ['Ëã±Ë™û', 'Ë®ÄËëâ', '„Ç≥„Éü„É•„Éã„Ç±„Éº„Ç∑„Éß„É≥', 'Â§ñÂõΩ‰∫∫', 'Ë®ÄË™û']
            }
        };
    }

    analyzeEmotionalConcerns(userMessage) {
        const concerns = {};
        let totalScore = 0;

        Object.keys(this.emotionalConcerns).forEach(category => {
            const categoryData = this.emotionalConcerns[category];
            let matchCount = 0;

            categoryData.keywords.forEach(keyword => {
                if (userMessage.includes(keyword)) {
                    matchCount++;
                }
            });

            const categoryScore = Math.min(matchCount * 15, categoryData.weight);
            concerns[category] = categoryScore;
            totalScore += categoryScore;
        });

        return { concerns, totalScore };
    }

    async calculateShopMatchingScore(shop, emotionalConcerns) {
        let emotionalScore = 0;
        
        // ÂÆâÂÖ®ÊÄß„ÅÆÊá∏Âøµ
        if (emotionalConcerns.safety > 0) {
            if (shop.safety_equipment) emotionalScore += 15;
            if (shop.insurance_coverage) emotionalScore += 10;
            if (shop.experience_years >= 10) emotionalScore += 8;
            if (shop.incident_record === '„Å™„Åó') emotionalScore += 7;
        }

        // „Çπ„Ç≠„É´„ÅÆÊá∏Âøµ
        if (emotionalConcerns.skill > 0) {
            if (shop.beginner_friendly) emotionalScore += 15;
            if (shop.license_course_available) emotionalScore += 10;
            if (shop.max_group_size <= 4) emotionalScore += 8;
            if (shop.private_guide_available) emotionalScore += 7;
        }

        // ‰∏Ä‰∫∫ÂèÇÂä†„ÅÆÊá∏Âøµ
        if (emotionalConcerns.solo > 0) {
            if (shop.solo_welcome) emotionalScore += 15;
            if (shop.max_group_size <= 6) emotionalScore += 10;
            if (shop.customer_rating >= 4.5) emotionalScore += 8;
        }

        // Ë≤ªÁî®„ÅÆÊá∏Âøµ
        if (emotionalConcerns.cost > 0) {
            if (shop.fun_dive_price_2tanks <= 14000) emotionalScore += 15;
            else if (shop.fun_dive_price_2tanks <= 16000) emotionalScore += 10;
            else if (shop.fun_dive_price_2tanks <= 18000) emotionalScore += 5;
            
            if (shop.equipment_rental_included) emotionalScore += 8;
        }

        // ‰ΩìÂäõÁöÑ„Å™Êá∏Âøµ
        if (emotionalConcerns.physical > 0) {
            if (shop.pickup_service) emotionalScore += 10;
            if (shop.trial_dive_options) emotionalScore += 8;
            if (shop.max_group_size <= 4) emotionalScore += 7;
        }

        // „Ç≥„Éü„É•„Éã„Ç±„Éº„Ç∑„Éß„É≥„ÅÆÊá∏Âøµ
        if (emotionalConcerns.communication > 0) {
            if (shop.english_support) emotionalScore += 12;
            if (shop.female_instructor) emotionalScore += 8;
        }

        // „Çµ„Éº„Éì„Çπ„Çπ„Ç≥„Ç¢ÁÆóÂá∫
        let serviceScore = 0;
        
        // Jiji„Ç∞„É¨„Éº„Éâ„Å´„Çà„Çã„Çπ„Ç≥„Ç¢
        switch (shop.jiji_grade) {
            case 'SÁ∫ß': serviceScore += 20; break;
            case 'AÁ∫ß': serviceScore += 15; break;
            case 'BÁ∫ß': serviceScore += 10; break;
            case 'CÁ∫ß': serviceScore += 5; break;
        }
        
        // È°ßÂÆ¢Ë©ï‰æ°„Å´„Çà„Çã„Çπ„Ç≥„Ç¢
        if (shop.customer_rating >= 4.8) serviceScore += 15;
        else if (shop.customer_rating >= 4.5) serviceScore += 10;
        else if (shop.customer_rating >= 4.0) serviceScore += 5;
        
        // „É¨„Éì„É•„ÉºÊï∞„Å´„Çà„Çã„Çπ„Ç≥„Ç¢
        if (shop.review_count >= 100) serviceScore += 10;
        else if (shop.review_count >= 50) serviceScore += 7;
        else if (shop.review_count >= 20) serviceScore += 4;

        // Á∑èÂêà„Çπ„Ç≥„Ç¢
        const totalScore = emotionalScore + serviceScore;
        
        return {
            shop,
            emotionalScore,
            serviceScore,
            totalScore,
            recommendation: this.generateRecommendationReason(shop, emotionalConcerns)
        };
    }

    generateRecommendationReason(shop, concerns) {
        const reasons = [];
        
        if (concerns.safety > 0 && shop.safety_equipment && shop.insurance_coverage) {
            reasons.push('ÂÆâÂÖ®Ë®≠ÂÇô„Éª‰øùÈô∫ÂÆåÂÇô„ÅßÂÆâÂøÉ');
        }
        
        if (concerns.skill > 0 && shop.beginner_friendly) {
            reasons.push('ÂàùÂøÉËÄÖÂêë„Åë„Çµ„Éù„Éº„Éà„ÅåÂÖÖÂÆü');
        }
        
        if (concerns.solo > 0 && shop.solo_welcome) {
            reasons.push('‰∏Ä‰∫∫ÂèÇÂä†Ê≠ìËøé');
        }
        
        if (concerns.cost > 0 && shop.fun_dive_price_2tanks <= 15000) {
            reasons.push('„É™„Éº„Ç∫„Éä„Éñ„É´„Å™ÊñôÈáëË®≠ÂÆö');
        }
        
        if (shop.customer_rating >= 4.7) {
            reasons.push('È´òË©ï‰æ°„ÅÆ‰ø°È†º„Åß„Åç„Çã„Ç∑„Éß„ÉÉ„Éó');
        }
        
        return reasons.join('„ÄÅ');
    }

    generateJijiMessage(bestMatch, concerns) {
        const shop = bestMatch.shop;
        let message = `${shop.shop_name}„Åå„Å¥„Å£„Åü„Çä„Å†„Å®ÊÄù„ÅÑ„Åæ„ÅôÔºÅ`;
        
        if (concerns.safety > 0) {
            message += `ÂÆâÂÖ®Èù¢„ÇÇ„Åó„Å£„Åã„Çä„Åó„Å¶„ÅÑ„Çã„ÅÆ„ÅßÂÆâÂøÉ„Åó„Å¶„ÉÄ„Ç§„Éì„É≥„Ç∞„ÇíÊ•Ω„Åó„ÇÅ„Åæ„Åô„Çà„ÄÇ`;
        }
        
        if (concerns.skill > 0) {
            message += `ÂàùÂøÉËÄÖ„ÅÆÊñπ„Å´„ÇÇ‰∏ÅÂØß„Å´ÊåáÂ∞é„Åó„Å¶„Åè„Çå„Çã„ÅÆ„Åß„ÄÅ„Çπ„Ç≠„É´„Ç¢„ÉÉ„Éó„Å´„ÇÇÊúÄÈÅ©„Åß„Åô„ÄÇ`;
        }
        
        if (concerns.solo > 0) {
            message += `‰∏Ä‰∫∫ÂèÇÂä†„ÅÆÊñπ„ÇÇÂ§ö„ÅÑ„ÅÆ„Åß„ÄÅ„Åç„Å£„Å®Á¥†Êïµ„Å™Âá∫‰ºö„ÅÑ„Åå„ÅÇ„Çã„ÅØ„Åö„Åß„ÅôÔºÅ`;
        }
        
        message += `${shop.area}„Åß„ÅÆÁ¥†Êô¥„Çâ„Åó„ÅÑ„ÉÄ„Ç§„Éì„É≥„Ç∞‰ΩìÈ®ì„Çí„ÄÅJiji„ÇÇÂøúÊè¥„Åó„Å¶„ÅÑ„Åæ„ÅôÔºÅüê†`;
        
        return message;
    }

    async findBestMatches(userMessage, userArea = null, maxResults = 3) {
        console.log(`\nüîç ÊÑüÊÉÖÂàÜÊûê„Å®„Éû„ÉÉ„ÉÅ„É≥„Ç∞ÈñãÂßã...`);
        console.log(`üìù „É¶„Éº„Ç∂„Éº„É°„ÉÉ„Çª„Éº„Ç∏: "${userMessage}"`);
        
        // ÊÑüÊÉÖÂàÜÊûê
        const { concerns, totalScore } = this.analyzeEmotionalConcerns(userMessage);
        console.log(`üí≠ ÊÑüÊÉÖ„Çπ„Ç≥„Ç¢ÂêàË®à: ${totalScore}ÁÇπ`);
        
        // ÂÖ®„Ç∑„Éß„ÉÉ„Éó„Éá„Éº„ÇøÂèñÂæó
        let allShops = await this.sheetsConnector.getAllShops();
        
        // „Ç®„É™„Ç¢„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
        if (userArea) {
            allShops = allShops.filter(shop => shop.area === userArea);
            console.log(`üèùÔ∏è  „Ç®„É™„Ç¢Áµû„ÇäËæº„Åø (${userArea}): ${allShops.length}Â∫óËàó`);
        }
        
        // ÂêÑ„Ç∑„Éß„ÉÉ„Éó„ÅÆ„Éû„ÉÉ„ÉÅ„É≥„Ç∞„Çπ„Ç≥„Ç¢Ë®àÁÆó
        const matchingResults = await Promise.all(
            allShops.map(shop => this.calculateShopMatchingScore(shop, concerns))
        );
        
        // „Çπ„Ç≥„Ç¢È†Ü„Å´„ÇΩ„Éº„Éà
        const sortedResults = matchingResults
            .sort((a, b) => b.totalScore - a.totalScore)
            .slice(0, maxResults);
        
        return {
            emotionalAnalysis: { concerns, totalScore },
            recommendations: sortedResults,
            searchArea: userArea,
            totalShopsSearched: allShops.length
        };
    }

    async displayResults(results) {
        console.log('\nüéØ „Éû„ÉÉ„ÉÅ„É≥„Ç∞ÁµêÊûú\n');
        console.log('='.repeat(50));
        
        // ÊÑüÊÉÖÂàÜÊûêÁµêÊûú
        console.log('\nüí≠ ÊÑüÊÉÖÂàÜÊûêÁµêÊûú:');
        Object.entries(results.emotionalAnalysis.concerns).forEach(([category, score]) => {
            if (score > 0) {
                const categoryNames = {
                    safety: 'ÂÆâÂÖ®ÊÄß„Å∏„ÅÆÊá∏Âøµ',
                    skill: '„Çπ„Ç≠„É´„Å∏„ÅÆ‰∏çÂÆâ',
                    solo: '‰∏Ä‰∫∫ÂèÇÂä†„ÅÆÂøÉÈÖç',
                    cost: 'ÊñôÈáë„ÅÆÂøÉÈÖç',
                    physical: '‰ΩìÂäõÈù¢„ÅÆ‰∏çÂÆâ',
                    communication: '„Ç≥„Éü„É•„Éã„Ç±„Éº„Ç∑„Éß„É≥'
                };
                console.log(`  ${categoryNames[category]}: ${score}ÁÇπ`);
            }
        });
        
        // Êé®Â•®„Ç∑„Éß„ÉÉ„Éó
        console.log('\nüèÜ Êé®Â•®„Ç∑„Éß„ÉÉ„Éó:');
        results.recommendations.forEach((result, index) => {
            const shop = result.shop;
            console.log(`\n${index + 1}. ${shop.shop_name} (${shop.area})`);
            console.log(`   Á∑èÂêà„Çπ„Ç≥„Ç¢: ${result.totalScore}ÁÇπ (ÊÑüÊÉÖ: ${result.emotionalScore}, „Çµ„Éº„Éì„Çπ: ${result.serviceScore})`);
            console.log(`   Ë©ï‰æ°: ${shop.customer_rating}‚òÖ (${shop.review_count}‰ª∂) | „Ç∞„É¨„Éº„Éâ: ${shop.jiji_grade}`);
            console.log(`   ÊñôÈáë: ¬•${shop.fun_dive_price_2tanks.toLocaleString()} | ÊúÄÂ§ß„Ç∞„É´„Éº„Éó: ${shop.max_group_size}Âêç`);
            console.log(`   Êé®Ëñ¶ÁêÜÁî±: ${result.recommendation}`);
            console.log(`   ÁâπÂæ¥: ${shop.speciality_areas}`);
            if (shop.website) {
                console.log(`   „Ç¶„Çß„Éñ„Çµ„Ç§„Éà: ${shop.website}`);
            }
        });

        // Jiji„Åã„Çâ„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏
        console.log('\nüí¨ Jiji„Åã„Çâ„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏:');
        const bestMatch = results.recommendations[0];
        if (bestMatch) {
            const jijiMessage = this.generateJijiMessage(bestMatch, results.emotionalAnalysis.concerns);
            console.log(`   "${jijiMessage}"`);
        }
    }
}

// „ÉÜ„Çπ„Éà„Ç∑„Éä„É™„Ç™
const testScenarios = [
    {
        name: 'ÂàùÂøÉËÄÖ„ÉªÂÆâÂÖ®ÈáçË¶ñ„ÉªÁü≥Âû£Â≥∂',
        message: 'Áü≥Âû£Â≥∂„Åß„ÉÄ„Ç§„Éì„É≥„Ç∞„Åó„Åü„ÅÑ„ÅÆ„Åß„Åô„Åå„ÄÅÂàù„ÇÅ„Å¶„ÅßÂÆâÂÖ®Èù¢„ÅåÂøÉÈÖç„Åß„Åô„ÄÇ‰∫ãÊïÖ„Å®„ÅãÂ§ß‰∏àÂ§´„Åß„Åó„Çá„ÅÜ„ÅãÔºü',
        area: 'Áü≥Âû£Â≥∂'
    },
    {
        name: '‰∏Ä‰∫∫ÂèÇÂä†„ÉªÂ•≥ÊÄß„ÉªÂÆÆÂè§Â≥∂',
        message: 'ÂÆÆÂè§Â≥∂„Åß‰∏Ä‰∫∫ÂèÇÂä†„ÇíËÄÉ„Åà„Å¶„ÅÑ„Åæ„Åô„ÄÇÂ•≥ÊÄß‰∏Ä‰∫∫„Åß„ÇÇÂ§ß‰∏àÂ§´„Åß„Åó„Çá„ÅÜ„ÅãÔºü',
        area: 'ÂÆÆÂè§Â≥∂'
    },
    {
        name: '‰∫àÁÆóÈáçË¶ñ„Éª„Çπ„Ç≠„É´‰∏çÂÆâ',
        message: '‰∫àÁÆó„Çí„Å™„Çã„Åπ„ÅèÊäë„Åà„Åü„Åè„Å¶„ÄÅ„Åß„ÇÇ‰∏ãÊâã„Å™„ÅÆ„Åß‰∏ÅÂØß„Å´Êïô„Åà„Å¶„ÇÇ„Çâ„Åà„Çã„Å®„Åì„Çç„Åå„ÅÑ„ÅÑ„Åß„Åô„ÄÇ',
        area: null
    },
    {
        name: '„É™„Ç¢„É´„É¶„Éº„Ç∂„Éº„É°„ÉÉ„Çª„Éº„Ç∏',
        message: '„ÉÄ„Ç§„Éì„É≥„Ç∞ÂàùÂøÉËÄÖ„Åß‰∏Ä‰∫∫ÂèÇÂä†„Åß„Åô„ÄÇÁü≥Âû£Â≥∂„Åß„Éû„É≥„Çø„ÇíË¶ã„Åü„ÅÑ„ÅÆ„Åß„Åô„Åå„ÄÅÊ≥≥„Åé„ÅåÂæóÊÑè„Åß„ÅØ„Å™„ÅÑ„ÅÆ„Åß‰ΩìÂäõÈù¢„ÇÇÂøÉÈÖç„Åß„Åô„ÄÇÂÆâÂÖ®„ÅßÂàùÂøÉËÄÖ„Å´ÂÑ™„Åó„ÅÑ„Ç∑„Éß„ÉÉ„Éó„ÇíÊïô„Åà„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
        area: 'Áü≥Âû£Â≥∂'
    }
];

async function runTests() {
    console.log('\nüöÄ JijiÊÑüÊÉÖÁöÑ„Éû„ÉÉ„ÉÅ„É≥„Ç∞„Ç∑„Çπ„ÉÜ„É† - „É™„Ç¢„É´„Éá„Éº„Çø„ÉÜ„Çπ„Éà\n');
    console.log('='.repeat(60));
    
    const matcher = new JijiEmotionalMatcherWithRealData();
    
    // „Éá„Éº„ÇøÁµ±Ë®àË°®Á§∫
    const stats = await matcher.sheetsConnector.getShopStatistics();
    console.log('\nüìä „Éá„Éº„Çø„Éô„Éº„ÇπÁµ±Ë®à:');
    console.log(`  Á∑è„Ç∑„Éß„ÉÉ„ÉóÊï∞: ${stats.totalShops}`);
    console.log(`  ÂØæÂøú„Ç®„É™„Ç¢: ${stats.areas.join(', ')}`);
    console.log(`  Âπ≥ÂùáË©ï‰æ°: ${stats.avgRating}‚òÖ`);
    console.log(`  Âπ≥ÂùáÊñôÈáë: ¬•${stats.avgPrice.toLocaleString()}`);
    console.log(`  ÂàùÂøÉËÄÖÂØæÂøú: ${stats.beginnerFriendly}Â∫óËàó`);
    
    // ÂêÑ„ÉÜ„Çπ„Éà„Ç∑„Éä„É™„Ç™ÂÆüË°å
    for (let i = 0; i < testScenarios.length; i++) {
        const scenario = testScenarios[i];
        
        console.log('\n' + '='.repeat(60));
        console.log(`üß™ „ÉÜ„Çπ„Éà ${i + 1}: ${scenario.name}`);
        console.log('='.repeat(60));
        
        try {
            const results = await matcher.findBestMatches(scenario.message, scenario.area);
            await matcher.displayResults(results);
            
            // „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊÉÖÂ†±
            console.log(`\n‚ö° Ê§úÁ¥¢ÂØæË±°: ${results.totalShopsSearched}Â∫óËàó`);
            console.log(`‚è±Ô∏è  Âá¶ÁêÜÊôÇÈñì: Áû¨ÊôÇ`);
            
        } catch (error) {
            console.error(`‚ùå „ÉÜ„Çπ„ÉàÂ§±Êïó: ${error.message}`);
        }
        
        if (i < testScenarios.length - 1) {
            console.log('\n' + '-'.repeat(40));
            console.log('Ê¨°„ÅÆ„ÉÜ„Çπ„Éà„Åæ„ÅßÂæÖÊ©ü‰∏≠...');
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
    }
    
    console.log('\nüéâ ÂÖ®„ÉÜ„Çπ„ÉàÂÆå‰∫ÜÔºÅ');
    console.log('üí° Next: Phase 2 APIÁµ±ÂêàÈñãÂßã');
}

// „ÉÜ„Çπ„ÉàÂÆüË°å
if (require.main === module) {
    runTests().catch(console.error);
}

module.exports = JijiEmotionalMatcherWithRealData;