{
  "timestamp": "2025-07-07T01:47:29.949Z",
  "projectStructure": {
    "analyze-project.js": {
      "type": "file",
      "size": 16165,
      "modified": "2025-07-07T01:46:42.513Z"
    },
    "app.js": {
      "type": "file",
      "size": 9008,
      "modified": "2025-06-19T12:32:45.741Z"
    },
    "app.js.save": {
      "type": "file",
      "size": 9682,
      "modified": "2025-06-19T08:56:57.137Z"
    },
    "package-lock.json": {
      "type": "file",
      "size": 118288,
      "modified": "2025-06-16T15:53:24.955Z"
    },
    "package.json": {
      "type": "file",
      "size": 1162,
      "modified": "2025-06-16T15:08:50.639Z"
    },
    "src": {
      "database.js": {
        "type": "file",
        "size": 10029,
        "modified": "2025-06-19T08:15:32.387Z"
      },
      "jiji-persona.js": {
        "type": "file",
        "size": 14325,
        "modified": "2025-06-19T12:26:21.885Z"
      },
      "message-handler.js": {
        "type": "file",
        "size": 12143,
        "modified": "2025-06-19T12:31:13.225Z"
      },
      "server.js": {
        "type": "file",
        "size": 14969,
        "modified": "2025-06-29T13:28:20.320Z"
      }
    },
    "test_database.js": {
      "type": "file",
      "size": 4945,
      "modified": "2025-06-19T08:06:52.291Z"
    },
    "資料": {
      "IMG_4220.PNG": {
        "type": "file",
        "size": 1270151,
        "modified": "2025-06-14T15:07:31.000Z"
      },
      "IMG_4221.PNG": {
        "type": "file",
        "size": 293562,
        "modified": "2025-06-14T15:07:40.000Z"
      },
      "IMG_4222.PNG": {
        "type": "file",
        "size": 1134241,
        "modified": "2025-06-14T15:07:51.000Z"
      },
      "Jiji サービス企画プレゼンテーション.pdf": {
        "type": "file",
        "size": 4781327,
        "modified": "2025-06-16T09:09:06.557Z"
      },
      "Jiji開発計画書 v2.0 - 現状反映版完全仕様書.pdf": {
        "type": "file",
        "size": 12773298,
        "modified": "2025-06-20T14:16:06.799Z"
      },
      "line_mockup_consultation.html": {
        "type": "file",
        "size": 10765,
        "modified": "2025-06-16T09:20:47.141Z"
      },
      "line_mockup_reminder.html": {
        "type": "file",
        "size": 17143,
        "modified": "2025-06-16T09:20:33.752Z"
      },
      "ngrok_recovery_codes.txt": {
        "type": "file",
        "size": 110,
        "modified": "2025-06-19T09:25:57.187Z"
      },
      "ショップファイル - 一覧.csv": {
        "type": "file",
        "size": 18355,
        "modified": "2025-06-20T14:27:43.012Z"
      }
    },
    "keyFiles": [
      {
        "path": "package.json",
        "exists": true,
        "size": 1162
      },
      {
        "path": "app.js",
        "exists": true,
        "size": 9008
      },
      {
        "path": "src/database.js",
        "exists": true,
        "size": 10029
      },
      {
        "path": "src/message-handler.js",
        "exists": true,
        "size": 12143
      },
      {
        "path": "src/jiji-persona.js",
        "exists": true,
        "size": 14325
      },
      {
        "path": "src/server.js",
        "exists": true,
        "size": 14969
      }
    ]
  },
  "dependencies": {
    "production": {
      "@line/bot-sdk": "^7.5.2",
      "express": "^4.18.2",
      "openai": "^4.20.1",
      "dotenv": "^16.3.1",
      "@supabase/supabase-js": "^2.39.7",
      "redis": "^4.6.13",
      "pg": "^8.11.3"
    },
    "development": {
      "nodemon": "^3.0.1",
      "eslint": "^8.50.0"
    },
    "engines": {
      "node": ">=16.0.0"
    },
    "scripts": {
      "start": "node server.js",
      "dev": "nodemon server.js",
      "test": "node debug-tool.js",
      "syntax-check": "node -c conversation.js && node -c server.js",
      "lint": "eslint *.js",
      "debug": "node --inspect server.js"
    },
    "currentIntegrations": {
      "lineBot": true,
      "openai": true,
      "database": {
        "supabase": true,
        "redis": true,
        "postgresql": true
      },
      "webFramework": true
    }
  },
  "currentFeatures": [
    "Past Experience Extraction",
    "Diving Plan Detection",
    "Automatic Profile Updates",
    "AI Response Generation",
    "User Profile Management",
    "Conversation History",
    "Redis Caching",
    "Jiji Persona System"
  ],
  "databaseSchema": {
    "provider": "Supabase (PostgreSQL)",
    "cache": "Redis",
    "tables": {
      "user_profiles": {
        "fields": [
          "line_user_id",
          "name",
          "diving_experience",
          "license_type",
          "preferences",
          "profile_completion_rate"
        ],
        "operations": [
          "create",
          "read",
          "update"
        ]
      },
      "conversations": {
        "fields": [
          "line_user_id",
          "message_type",
          "message_content",
          "timestamp",
          "session_id",
          "metadata"
        ],
        "operations": [
          "create",
          "read"
        ]
      }
    },
    "needsExtension": true
  },
  "emotionalMatchingRequirements": {
    "purpose": "Match users based on emotional state, experience level, and preferences",
    "components": {
      "emotionalAnalysis": {
        "description": "Analyze user messages for emotional state",
        "methods": [
          "sentiment analysis",
          "emotion detection",
          "mood classification"
        ],
        "implementation": "OpenAI GPT-4 with custom prompts"
      },
      "matchingAlgorithm": {
        "description": "Find compatible diving partners",
        "factors": [
          "experience level",
          "emotional state",
          "preferences",
          "location",
          "availability"
        ],
        "algorithm": "weighted scoring system"
      },
      "userPreferences": {
        "description": "Extended user profile for matching",
        "additionalFields": [
          "personality_type",
          "communication_style",
          "stress_level",
          "adventure_level",
          "social_preference",
          "emotional_state_history"
        ]
      }
    },
    "databaseExtensions": {
      "newTables": [
        "emotional_profiles",
        "matching_preferences",
        "match_history",
        "emotional_analysis_log"
      ],
      "extendedFields": [
        "user_profiles.personality_traits",
        "user_profiles.emotional_preferences",
        "user_profiles.matching_settings"
      ]
    }
  },
  "googleSheetsIntegration": {
    "purpose": "Export user data, analytics, and matching results to Google Sheets",
    "useCases": [
      "User analytics dashboard",
      "Matching success rates",
      "Emotional state trends",
      "Diving preferences analysis",
      "Business intelligence reports"
    ],
    "requiredPackages": [
      "googleapis",
      "google-auth-library"
    ],
    "authentication": {
      "method": "Service Account",
      "requiredFiles": [
        "service-account-key.json"
      ],
      "environment": [
        "GOOGLE_SHEETS_PRIVATE_KEY",
        "GOOGLE_SHEETS_CLIENT_EMAIL"
      ]
    },
    "sheetStructure": {
      "userAnalytics": {
        "columns": [
          "user_id",
          "registration_date",
          "last_active",
          "message_count",
          "profile_completion",
          "emotional_state"
        ],
        "updateFrequency": "daily"
      },
      "matchingResults": {
        "columns": [
          "match_id",
          "user1_id",
          "user2_id",
          "compatibility_score",
          "match_date",
          "success_rate"
        ],
        "updateFrequency": "real-time"
      },
      "emotionalTrends": {
        "columns": [
          "date",
          "user_id",
          "emotional_state",
          "diving_context",
          "satisfaction_score"
        ],
        "updateFrequency": "daily"
      }
    },
    "apiEndpoints": [
      "GET /api/export/users",
      "GET /api/export/matches",
      "GET /api/export/analytics",
      "POST /api/sheets/update"
    ]
  },
  "recommendations": [
    {
      "category": "Database Schema",
      "priority": "High",
      "description": "Extend database schema for emotional matching",
      "tasks": [
        "Create emotional_profiles table",
        "Add personality_traits field to user_profiles",
        "Create matching_preferences table",
        "Add emotional analysis logging"
      ]
    },
    {
      "category": "Dependencies",
      "priority": "High",
      "description": "Install required packages for Google Sheets integration",
      "tasks": [
        "npm install googleapis google-auth-library",
        "Set up Google Cloud Service Account",
        "Configure environment variables"
      ]
    },
    {
      "category": "API Development",
      "priority": "Medium",
      "description": "Develop emotional matching API endpoints",
      "tasks": [
        "Create emotion analysis service",
        "Implement matching algorithm",
        "Add Google Sheets export endpoints",
        "Create admin dashboard for monitoring"
      ]
    },
    {
      "category": "Security",
      "priority": "High",
      "description": "Implement security measures for sensitive data",
      "tasks": [
        "Encrypt emotional profile data",
        "Add user consent management",
        "Implement data retention policies",
        "Add privacy controls"
      ]
    },
    {
      "category": "Testing",
      "priority": "Medium",
      "description": "Create comprehensive testing suite",
      "tasks": [
        "Unit tests for emotion analysis",
        "Integration tests for matching algorithm",
        "End-to-end tests for Google Sheets export",
        "Performance tests for matching speed"
      ]
    }
  ]
}